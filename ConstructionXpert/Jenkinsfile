pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        SONARQUBE_SERVER = 'SonarQubeServer'
        DOCKER_REGISTRY = 'your-docker-registry-url'
        DOCKER_HUB_REPO = 'chaimaalachhab01/constructionxpert'
        SONAR_TOKEN = credentials('SonarQubeToken')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ChaimaaLachhab/ConstructionXpert-Services-Microservices-Frontend.git'
            }
        }

        stage('Build and Unit Tests') {
            steps {
                script {
                    def services = ['eureka-server', 'gateway-service', 'project-service', 'resource-service', 'task-service', 'user-service']

                    dir('ConstructionXpert') {
                        bat "mvn clean install -X"

                        services.each { service ->
                            dir(service) {
                                echo "Building and testing ${service}"
                                bat "mvn clean install"
                                bat "mvn test"
                            }
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def services = ['eureka-server', 'gateway-service', 'project-service', 'resource-service', 'task-service', 'user-service']

                    dir('ConstructionXpert') {
                        services.each { service ->
                            dir(service) {
                                withSonarQubeEnv('SonarQubeServer') {
                                    bat "mvn sonar:sonar -Dsonar.projectKey=${service} -Dsonar.host.url=http://localhost:9000 -Dsonar.token=${SONAR_TOKEN}"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['eureka-server', 'gateway-service', 'project-service', 'resource-service', 'task-service', 'user-service']

                    dir('ConstructionXpert') {
                        services.each { service ->
                            dir(service) {
                                bat "docker build -t constructionxpert-${service} ."
                            }
                        }
                    }
                }
            }
        }

        stage('Tag and Push Docker Images') {
            steps {
                script {
                    def services = ['eureka-server', 'gateway-service', 'project-service', 'resource-service', 'task-service', 'user-service']

                    docker.withRegistry("https://index.docker.io/v1/", 'docker-credentials-id') {
                        services.each { service ->
                            def imageName = "${DOCKER_HUB_REPO}:${service}"
                            bat """
                                docker tag constructionxpert-${service}:latest ${imageName}
                                docker push ${imageName}
                            """
                        }
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                script {
                    dir('ConstructionXpert') {
                        bat 'docker-compose up -d'
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}